{"ast":null,"code":"var _jsxFileName = \"/Users/samhiga/Bootcamp/bucket-list/src/components/BucketList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BucketList() {\n  _s();\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = item => {\n    return setBucket(bucket.push(item));\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = id => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map(item => {\n      if (item.id == id) {\n        //\"mark that item as complete\"\n        //item.complete = true;\n        return {\n          ...item,\n          complete: true\n        };\n      }\n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      return item;\n    });\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = id => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    let removeBucket = bucket.filter(item => item.id !== id);\n    //it's an array\n    //we can use \"filter\" to remove items from an array.$\n\n    // let updatedBucket2 = bucket.filter((item) => item.id == id)\n\n    return setBucket(removeBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket(prev => prev.map(item => item.id === itemId ? newValue : item));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What is on your bucket list?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BucketForm, {\n      onSubmit: addBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bucket, {\n      bucket: bucket,\n      completeBucketItem: completeBucketItem,\n      removeBucketItem: removeBucketItem,\n      editBucketItem: editBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(BucketList, \"v9pnzffudb0EPv26TAOFWvRojGo=\");\n_c = BucketList;\nexport default BucketList;\nvar _c;\n$RefreshReg$(_c, \"BucketList\");","map":{"version":3,"names":["React","useState","BucketForm","Bucket","jsxDEV","_jsxDEV","BucketList","_s","bucket","setBucket","addBucketItem","item","push","completeBucketItem","id","updatedBucket","map","complete","removeBucketItem","removeBucket","filter","editBucketItem","itemId","newValue","text","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/samhiga/Bootcamp/bucket-list/src/components/BucketList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    return setBucket((bucket.push(item)))\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    \n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      if(item.id == id){\n        //\"mark that item as complete\"\n        //item.complete = true;\n        return {...item, complete: true }\n      }\n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n      return item;\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    let removeBucket = bucket.filter((item) => item.id !== id);\n    //it's an array\n    //we can use \"filter\" to remove items from an array.$\n\n    // let updatedBucket2 = bucket.filter((item) => item.id == id)\n\n    return setBucket(removeBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMS,aAAa,GAAIC,IAAI,IAAK;IAC9B,OAAOF,SAAS,CAAED,MAAM,CAACI,IAAI,CAACD,IAAI,CAAE,CAAC;IACrC;EAEF,CAAC;;EAED;EACA,MAAME,kBAAkB,GAAIC,EAAE,IAAK;IACjC;IACA,IAAIC,aAAa,GAAGP,MAAM,CAACQ,GAAG,CAAEL,IAAI,IAAK;MACvC,IAAGA,IAAI,CAACG,EAAE,IAAIA,EAAE,EAAC;QACf;QACA;QACA,OAAO;UAAC,GAAGH,IAAI;UAAEM,QAAQ,EAAE;QAAK,CAAC;MACnC;MACA;MACA,OAAON,IAAI;IACb,CAAC,CAAC;IAEFF,SAAS,CAACM,aAAa,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAIJ,EAAE,IAAK;IAC/B;IACA,IAAIK,YAAY,GAAGX,MAAM,CAACY,MAAM,CAAET,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKA,EAAE,CAAC;IAC1D;IACA;;IAEA;;IAEA,OAAOL,SAAS,CAACU,YAAY,CAAC;EAChC,CAAC;;EAED;EACA,MAAME,cAAc,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;IAC3C;IACA,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;MAClB;IACF;;IAEA;IACA;IACAf,SAAS,CAAEgB,IAAI,IACbA,IAAI,CAACT,GAAG,CAAEL,IAAI,IAAMA,IAAI,CAACG,EAAE,KAAKQ,MAAM,GAAGC,QAAQ,GAAGZ,IAAK,CAC3D,CAAC;EACH,CAAC;EAED,oBACEN,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCzB,OAAA,CAACH,UAAU;MAAC6B,QAAQ,EAAErB;IAAc;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvCzB,OAAA,CAACF,MAAM;MACLK,MAAM,EAAEA,MAAO;MACfK,kBAAkB,EAAEA,kBAAmB;MACvCK,gBAAgB,EAAEA,gBAAiB;MACnCG,cAAc,EAAEA;IAAe;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAACvB,EAAA,CAhEQD,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAkEnB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}